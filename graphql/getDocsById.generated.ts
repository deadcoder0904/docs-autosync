/* DO NOT EDIT! this file was generated by graphql-codegen */
/* eslint-disable */
import * as Types from "./types.generated";

import { useQuery, UseQueryOptions } from "react-query";

function fetcher<TData, TVariables>(query: string, variables?: TVariables) {
  return async (): Promise<TData> => {
    const res = await fetch("http://localhost:3000/api", {
      method: "POST",
      ...{
        headers: { credentials: "include", "content-type": "application/json" },
      },
      body: JSON.stringify({ query, variables }),
    });

    const json = await res.json();

    if (json.errors) {
      const { message } = json.errors[0];

      throw new Error(message);
    }

    return json.data;
  };
}
export type GetDocsByIdQueryVariables = Types.Exact<{
  id: Types.Scalars["String"];
}>;

export type GetDocsByIdQuery = {
  __typename?: "Query";
  getDocsById?:
    | { __typename?: "Docs"; id: string; text: string; published: boolean }
    | null
    | undefined;
};

export const GetDocsByIdDocument = `
    query GetDocsById($id: String!) {
  getDocsById(id: $id) {
    id
    text
    published
  }
}
    `;
export const useGetDocsByIdQuery = <TData = GetDocsByIdQuery, TError = unknown>(
  variables: GetDocsByIdQueryVariables,
  options?: UseQueryOptions<GetDocsByIdQuery, TError, TData>
) =>
  useQuery<GetDocsByIdQuery, TError, TData>(
    ["GetDocsById", variables],
    fetcher<GetDocsByIdQuery, GetDocsByIdQueryVariables>(
      GetDocsByIdDocument,
      variables
    ),
    options
  );
