/* DO NOT EDIT! this file was generated by graphql-codegen */
/* eslint-disable */
import * as Types from "./types.generated";

import { useQuery, UseQueryOptions } from "react-query";

function fetcher<TData, TVariables>(query: string, variables?: TVariables) {
  return async (): Promise<TData> => {
    const res = await fetch("http://localhost:3000/api", {
      method: "POST",
      ...{
        headers: { credentials: "include", "content-type": "application/json" },
      },
      body: JSON.stringify({ query, variables }),
    });

    const json = await res.json();

    if (json.errors) {
      const { message } = json.errors[0];

      throw new Error(message);
    }

    return json.data;
  };
}
export type GetDocsQueryVariables = Types.Exact<{ [key: string]: never }>;

export type GetDocsQuery = {
  __typename?: "Query";
  docs?:
    | Array<
        | { __typename?: "Docs"; id: string; text: string; published: boolean }
        | null
        | undefined
      >
    | null
    | undefined;
};

export const GetDocsDocument = `
    query GetDocs {
  docs {
    id
    text
    published
  }
}
    `;
export const useGetDocsQuery = <TData = GetDocsQuery, TError = unknown>(
  variables?: GetDocsQueryVariables,
  options?: UseQueryOptions<GetDocsQuery, TError, TData>
) =>
  useQuery<GetDocsQuery, TError, TData>(
    variables === undefined ? ["GetDocs"] : ["GetDocs", variables],
    fetcher<GetDocsQuery, GetDocsQueryVariables>(GetDocsDocument, variables),
    options
  );
