/* DO NOT EDIT! this file was generated by graphql-codegen */
/* eslint-disable */
import * as Types from "./types.generated";

import { useMutation, UseMutationOptions } from "react-query";

function fetcher<TData, TVariables>(query: string, variables?: TVariables) {
  return async (): Promise<TData> => {
    const res = await fetch("http://localhost:3000/api", {
      method: "POST",
      ...{
        headers: { credentials: "include", "content-type": "application/json" },
      },
      body: JSON.stringify({ query, variables }),
    });

    const json = await res.json();

    if (json.errors) {
      const { message } = json.errors[0];

      throw new Error(message);
    }

    return json.data;
  };
}
export type CreateDocsMutationVariables = Types.Exact<{ [key: string]: never }>;

export type CreateDocsMutation = {
  __typename?: "Mutation";
  createDocs?:
    | { __typename?: "Docs"; id: string; text: string; published: boolean }
    | null
    | undefined;
};

export const CreateDocsDocument = `
    mutation CreateDocs {
  createDocs {
    id
    text
    published
  }
}
    `;
export const useCreateDocsMutation = <TError = unknown, TContext = unknown>(
  options?: UseMutationOptions<
    CreateDocsMutation,
    TError,
    CreateDocsMutationVariables,
    TContext
  >
) =>
  useMutation<
    CreateDocsMutation,
    TError,
    CreateDocsMutationVariables,
    TContext
  >(
    "CreateDocs",
    (variables?: CreateDocsMutationVariables) =>
      fetcher<CreateDocsMutation, CreateDocsMutationVariables>(
        CreateDocsDocument,
        variables
      )(),
    options
  );
